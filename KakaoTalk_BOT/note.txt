
# def kakao_sendtext_and_close(chatroom_name, text):
#     hwndMain = open_chatroom(chatroom_name)
#     print(chatroom_name, ':', hwndMain)

#     if hwndMain != 0:
#         win32gui.SetForegroundWindow(hwndMain)
#         time.sleep(0.01)
#         pyperclip.copy(text) 
#         pyautogui.hotkey('ctrl', 'v')
#         pyautogui.press('enter')
        
#         win32gui.PostMessage(hwndMain, win32con.WM_CLOSE, 0, 0) # close

    def PostKeyEx(self, hwnd, key, shift, specialkey):
        if IsWindow(hwnd):
            ThreadId = GetWindowThreadProcessId(hwnd, None)
            lparam = MakeLong(0, MapVirtualKeyA(key, 0))
            msg_down = w.WM_KEYDOWN
            msg_up = w.WM_KEYUP

            if specialkey:
                lparam = lparam | 0x1000000

            if len(shift) > 0:
                pKeyBuffers = PBYTE256()
                pKeyBuffers_old = PBYTE256()

                win32gui.SendMessage(hwnd, w.WM_ACTIVATE, w.WA_ACTIVE, 0)
                AttachThreadInput(GetCurrentThreadId(), ThreadId, True)
                GetKeyboardState(ctypes.byref(pKeyBuffers_old))
            
                for modkey in shift:
                    if modkey == w.VK_MENU:
                        lparam = lparam | 0x20000000
                        msg_down = w.WM_SYSKEYDOWN
                        msg_up = w.WM_SYSKEYUP
                    pKeyBuffers[modkey] |= 128
            
                SetKeyboardState(ctypes.byref(pKeyBuffers))
                time.sleep(0.01)
                PostMessage(hwnd, msg_down, key, lparam)
                time.sleep(0.01)
                PostMessage(hwnd, msg_up, key, lparam | 0xC0000000)
                time.sleep(0.01)
                SetKeyboardState(ctypes.byref(pKeyBuffers_old))
                time.sleep(0.01)
                AttachThreadInput(GetCurrentThreadId(), ThreadId, False)

            else:
                SendMessage(hwnd, msg_down, key, lparam)
                SendMessage(hwnd, msg_up, key, lparam | 0xC0000000)
    
    def copy_chatroom(self, chatroom_name):
        # # 핸들 _ 채팅방
        hwndMain = win32gui.FindWindow( None, chatroom_name)
        hwndListControl = win32gui.FindWindowEx(hwndMain, None, "EVA_VH_ListControl_Dblclk", None)

        # #조합키, 본문을 클립보드에 복사 ( ctl + c , v )
        self.PostKeyEx(hwndListControl, ord('A'), [w.VK_CONTROL], False)
        time.sleep(1)
        self.PostKeyEx(hwndListControl, ord('C'), [w.VK_CONTROL], False)
        ctext = clipboard.GetData()
        # print(ctext)
        return ctext
    
    def chat_last_save(self, kakao_opentalk_name):
        #self.open_chatroom(kakao_opentalk_name)  # 채팅방 열기
        ttext = self.copy_chatroom(kakao_opentalk_name)  # 채팅내용 가져오기

        a = ttext.split('\r\n')   # \r\n 으로 스플릿 __ 대화내용 인용의 경우 \r 때문에 해당안됨
        df = pd.DataFrame(a)    # DF 으로 바꾸기

        df[0] = df[0].str.replace('\[([\S\s]+)\] \[(오전|오후)([0-9:\s]+)\] ', '')  # 정규식으로 채팅내용만 남기기

        print(df.index[-2], df.iloc[-2, 0])
        return df.index[-2], df.iloc[-2, 0]

PBYTE256 = ctypes.c_ubyte * 256
_user32 = ctypes.WinDLL("user32")
GetKeyboardState = _user32.GetKeyboardState
SetKeyboardState = _user32.SetKeyboardState
GetCurrentThreadId = win32api.GetCurrentThreadId
GetWindowThreadProcessId = _user32.GetWindowThreadProcessId
AttachThreadInput = _user32.AttachThreadInput
PostMessage = win32api.PostMessage
SendMessage = win32gui.SendMessage
FindWindow = win32gui.FindWindow
IsWindow = win32gui.IsWindow

MapVirtualKeyA = _user32.MapVirtualKeyA
MapVirtualKeyW = _user32.MapVirtualKeyW

MakeLong = win32api.MAKELONG
w = win32con


# kakao_opentalk_names = ["김지희 (Jihee Kim)", "엄마", "NND alert test 1", "NND alert test 2", "NND alert test 3", "test 4", "test 5", "test 6", "test 7", "test 8", "test 9", "test 10"]
# text = "MI2 NND(A) #02 INTEGRATION LOT_ID: 8EGB35NA02 has NG Rate of 7.33% at 2025-07-11 08:01:21. Total defect count is 47. Surface defect count: 36, Dimension defect count: 15. Please Check!!"


#Advanced search:
cntrl v
tab
space
down arrow
enter


  def unique_code_confirm(self, code, chatroom_name):
        pyautogui.hotkey('ctrl', 'f')
        pyautogui.press('tab')   
        pyautogui.press('space')   
        pyautogui.press('down')    
        pyautogui.press('enter')

        hwndMain = win32gui.FindWindow(None, code)

        searchedroom_name = win32gui.GetWindowText(hwndMain)
        print(searchedroom_name)

        if searchedroom_name == chatroom_name:
            return True
        else:
            return False


  code = uuid.uuid4().hex[:8]
                    pyperclip.copy(text + "\n\n" + f"chat code: {code}")
                    pyautogui.hotkey('ctrl', 'v')
                    time.sleep(1)
                    pyautogui.hotkey('ctrl', 'a')
                    pyautogui.hotkey('ctrl', 'c')
                    ctext = clipboard.GetData().strip()
                    sent_text = ctext.splitlines()[0]
                    pyautogui.press('enter')
                    time.sleep(1)


class KakaoChatService:
    def kakao_sendtext_and_close(self, chatroom_name, text):
        hwndMain = self.open_chatroom(chatroom_name)
        print(chatroom_name, ':', hwndMain)

        if hwndMain != 0:
            win32gui.SetForegroundWindow(hwndMain)
            time.sleep(0.1)

            actual_title = win32gui.GetWindowText(hwndMain)

            if chatroom_name not in actual_title:
                print(f"[Error] Opened wrong chatroom: {actual_title}")
                self.log_result(chatroom_name, actual_title, text, "", "FAIL", "Opend Wrong Chatroom")
                win32gui.PostMessage(hwndMain, win32con.WM_CLOSE, 0, 0)

            else:
                try:
                    code = uuid.uuid4().hex[:8]
                    pyperclip.copy(text + "\n\n" + f"chat code: {code}")
                    pyautogui.hotkey('ctrl', 'v')
                    time.sleep(1)
                    pyautogui.hotkey('ctrl', 'a')
                    pyautogui.hotkey('ctrl', 'c')
                    ctext = clipboard.GetData().strip()
                    sent_text = ctext.splitlines()[0]
                    pyautogui.press('enter')
                    time.sleep(1)

                    # Unique code confirmation
                    pyautogui.keyDown('ctrl')
                    pyautogui.press('f')
                    time.sleep(0.5)
                    pyperclip.copy(code)
                    pyautogui.hotkey('ctrl', 'v')
                    pyautogui.press('tab')   
                    pyautogui.press('space')
                    time.sleep(0.5)    
                    win32gui.PostMessage(hwndMain, win32con.WM_CLOSE, 0, 0)
                    pyautogui.press('enter')
                    pyautogui.press('down')
                    pyautogui.press('enter')
                    time.sleep(0.5)
                    new_hwnd = win32gui.GetForegroundWindow()
                    searchedroom_name = win32gui.GetWindowText(new_hwnd)

                    print(searchedroom_name)

                    # Check if the message actually sent
                    if sent_text == text:
                        self.log_result(chatroom_name, actual_title, text, sent_text, "SUCCESS")
                    else: 
                        self.log_result(chatroom_name, actual_title, text, sent_text, "FAIL", "Message unmatched")

                except Exception as e:
                    print(f"[Error] Failed to send message: {e}")
                    self.log_result(chatroom_name, actual_title, text, "", "FAIL", str(e))

                hwndMain = new_hwnd
                win32gui.PostMessage(hwndMain, win32con.WM_CLOSE, 0, 0)
                time.sleep(1)
                
                integrated_hwnd = win32gui.GetForegroundWindow()
                integrated_window = win32gui.GetWindowText(integrated_hwnd)
                #print(integrated_window)
                if integrated_window == "Integrated Search":
                    win32gui.PostMessage(integrated_hwnd, win32con.WM_CLOSE, 0, 0)

        else:
            self.log_result(chatroom_name, "", text, "", "FAIL", "Chatroom Not Found")
        